" 
"barvy  pro bash logy jsou v  barvy.txt
"
set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

" break compatibility with vi
set nocompatible

let tlist_php_settings = 'php;d:constant;f:function;c:class'
let Tlist_Sort_Type = "name"
let Tlist_Show_One_File = 1

" buffers can exist in background
set hidden

" enable line numbers
set nu

set linespace=3

"persistent undo between sessions
set undofile
set undodir=/home/pavel/multimedia/vimdata/vimundo

" Sets how many lines of history VIM has to remember
set history=3000

" show line and column markers
"set cursorline
"set nocursorline
"set cursorcolumn

" enable soft word wrap
set formatoptions=l
set lbr

" move by screen lines, not by real lines - great for creative writing
"nnoremap j gj
"nnoremap k gk
 
" also in visual mode
"vnoremap j gj
"vnoremap k gk
"

"set guifont=Monospace\ 9
set guifont=WenQuanYi\ Micro\ Hei\ Mono\ 9

nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

"syntax on
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

set autoindent
" copy previous indent on enter 
set copyindent
set smartindent

" current directory is always matching the
" content of the active window
"set autochdir

set showmode

"autocmd FileType c,cpp,java,php,phtml autocmd BufWritePre <buffer> :%s/\s\+$//e
"autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
autocmd FileType c,cpp,java,php,phtml autocmd BufWritePre <buffer> :%s/\s\+$//e
"autocmd FileType php autocmd BufWritePost <buffer> :!phpcs --standard=Intraworlds %:p

set colorcolumn=121 "ukaze caru za poctem znaku - na dlouhy radky

set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
"set gdefault      "nemusi se psat g  u nahrazovani atd..

set incsearch		" incremental search
set hlsearch		" highlights searches
"enter hide highlights from last search
nnoremap <CR> :nohlsearch<CR>/<BS> 

"By default vim will clutter your directories with swap files and backup files
set noswapfile
set nobackup
set nowb

set runtimepath^=~/.vim/bundle/ctrlp.vim

"allow mouse
set mouse=a
"map <ScrollWheelUp> <esc>kkk
"map <ScrollWheelDown> <ESC>jjj



" use jj to quickly escape to normal mode while typing 
"inoremap jj <ESC>l
inoremap jf <ESC>l
"inoremap <F12> <c-o>:w<cr>

" press ; to issue commands in normal mode (no more shift holding)
" nnoremap ; :

"statusline
"[%b][0x%B]
set stl=Buf:\ #%n\ %l/%L[%p%%]\ %m\ %r\ \ Col:\ %c\ %f\ %=%l/%L[%p%%]
set laststatus=2

nnoremap <Leader>l :ls<CR>

nnoremap <f1> :NERDTreeToggle<CR>
" Don't display these kinds of files
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$',
            \ '\.o$', '\.so$', '\.egg$', '^\.git$' ]
"
"
let NERDTreeMapOpenInTab='<ENTER>'

"ctrlp settings:
let g:ctrlp_max_files=0
let g:ctrlp_max_height=36

":CtrlPClearAllCaches

":NERDTreeMirror

" vim-flake8 default configuration
" let g:flake8_max_line_length=120

let g:checksyntax_auto = 1

"let Tlist_Sort_Type = "name"
"let Tlist_Use_Right_Window = 1
""let Tlist_WinWidth = 20
"let tlist_php_settings = 'php;c:class;f:function'
"let Tlist_Compact_Format = 1

"nnoremap <f2> :TlistToggle<CR>

"disable arrows keys
"inoremap  <Up>     <NOP>
"inoremap  <Down>   <NOP>
"inoremap  <Left>   <NOP>
"inoremap  <Right>  <NOP>
"noremap   <Up>     <NOP>
"noremap   <Down>   <NOP>
"noremap   <Left>   <NOP>
"noremap   <Right>  <NOP>

noremap   * *#
noremap   # *#
noremap   ** *
noremap   ## #

map <2-LeftMouse> *
imap <2-LeftMouse> <c-o>**

map <Leader>e :Explore<cr>
"map <Leader>s :Sexplore<cr>

map <leader>n :cn<cr>
map <leader>p :cp<cr>
map <leader>c :botright cw 10<cr>

map <space> /
map <c-space> ?

"supertab
"let g:SuperTabDefaultCompletionType = ""

" Commands for :Explore
 let g:explVertical=1    " open vertical split winow

 let g:explSplitRight=1  " Put new window to the right of the explorer
 let g:explStartRight=0  " new windows go to right of explorer window

let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1
"
"let g:miniBufExplModSelTarget = 1
"let g:miniBufExplorerMoreThanOne = 0
"let g:miniBufExplModSelTarget = 0
"let g:miniBufExplUseSingleClick = 1
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplVSplit = 25
"let g:miniBufExplSplitBelow=1

"sexy_scroll
let g:SexyScroller_CursorTime = 0
let g:SexyScroller_EasingStyle = 4
"
let php_sql_query=1 "to highlight SQL syntax in string
let php_htmlInStrings=1 "to highlight HTML in string
"let php_noShorttags=1 "to disable short tags
"let php_folding=1 "to enable folding for classes and functions
"switch to directory of current file
command! CD cd %:p:h

" pressing < or > will let you indent/unident selected lines

 vnoremap < <gv
 vnoremap > >gv

" Make p in Visual mode replace the selected text with the "" register.

vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" Make tab in v mode work like I think it should (keep highlighting):
vmap <tab> >gv
vmap <s-tab> <gv

" Map <c-s> to write current buffer.
map <c-s> :w<cr>
imap <c-s> <c-o><c-s>
imap <c-s> <esc><c-s>

"center mark positon
":map <expr> MM printf('`%c zz',getchar()) 


" Select all.
"map <c-a> ggVG

" Undo in insert mode.
imap <c-z> <c-o>u

"check A B B R E V I A T I O N S

"move moving text up down
let g:move_map_keys = 0
vmap <C-j> <Plug>MoveBlockDown
vmap <C-k> <Plug>MoveBlockUp
"nmap <A-j> <Plug>MoveLineDown
"nmap <A-k> <Plug>MoveLineUp

nmap <C-j> <Plug>MoveLineDown
nmap <C-k> <Plug>MoveLineUp


" Avoids updating the screen before commands are completed
set lazyredraw

" Remap navigation commands to center view on cursor using zz
"nnoremap <C-U> 11kzz
"nnoremap <C-D> 11jzz
"nnoremap j jzz
"nnoremap k kzz
"nnoremap # #zz
"nnoremap * *zz
"nnoremap n nzz
"nnoremap N Nzz

"tab settings:
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab  "Use spaces instead of tabs
set shiftround "Round the indention nicely with other indents
set autoindent "Automatically try to indent


"set virtualedit=all "Allows you to move into column without actual characthers in it.
"Automatically read file when it has been changed by another application"
set autoread 

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

set wildmenu
set wildmode=list,longest
"set wildmode=list,longest,full

" Ignore compiled files
set wildignore=*.swp,*.bak,*.pyc,*.class

" Use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
" yanked stack (also, in visual mode)
nnoremap <silent> <leader>d "_d
vnoremap <silent> <leader>d "_d

"Always show current position
"set ruler

" Smart way to move between windows
"map <C-j> <C-W>j
"map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

 "map <C-p> gT
 "map <C-n> gt

 map <C-n> <ESC>:b#<CR>

" Remember info about open buffers on close
" set viminfo^=%

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :40  :  up to 40 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='20,\"100,:100,%,n/home/pavel/multimedia/vimdata/viminfo/viminfo


"colorscheme buttercream
"colors zellner
"colorscheme solarized
" using this two:
"colorscheme guardian
"colorscheme ron
"colorscheme peaksea
"
"
set bg=light

"colorscheme earendel

"colorscheme xoria256
"colorscheme fisa
"colorscheme guardian

"colorscheme ron
"colorscheme peaksea
"colorscheme oceandeep

"===one combination:
" colorscheme fisa
" colorscheme xoria256
" colorscheme guardian
 
" colorscheme ron
" colorscheme peaksea
" colorscheme oceandeep
 "===end one combination
 

"===one combination:
"colorscheme xoria256
"colorscheme fisa
 "===end one combination

"===one combination:
"colorscheme xoria256
"colorscheme fisa
"colorscheme desert
"colorscheme autumn
 "===end one combination

"colorscheme tir_black
"colorscheme neverness

if has('gui_running')
  set guioptions-=T  " no toolbar
  "colorscheme elflord
  "hi Todo guifg=#40ffff guibg=#606060

  "resize window after start
  "set lines=70 columns=130 linespace=0

  set linespace=3

  set nocursorline
else
    " something for console Vim
    " colorscheme 3dglasses
endif

colorscheme jellybeans
"colorscheme wombat
"colorscheme 3dglasses
"colorscheme blueshift

"hi TabLineSel   ctermfg=White  ctermbg=DarkBlue  cterm=NONE

if &diff
    syntax off
    "colorscheme 3dglasses
"else
endif

"colorscheme darkspectrum
"colorscheme 3dglassespavel_blue

"svn diff
noremap <F3> :call Svndiff("prev")<CR> 
noremap <F4> :call Svndiff("next")<CR> 
noremap <F5> :call Svndiff("clear")<CR> 
hi DiffAdd      ctermfg=0 ctermbg=2 guibg='green' 
hi DiffDelete   ctermfg=0 ctermbg=1 guibg='red' 
hi DiffChange   ctermfg=0 ctermbg=3 guibg='yellow'

"svn blame
vmap gl :<C-U>!svn blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

"cscope settings
nmap <C-@><C-@> :cs find s <C-R>=expand("<cword>")<CR><CR>
"cscope add ~/tr/leonard52/application/cscope.out ~/tr/leonard52/
"cscope add ~/tr/leonard52/portal/cscope.out ~/tr/leonard52/

let mapleader = ","
let g:mapleader = ","

map <leader>r :NERDTreeFind<cr>zz

if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

 " Useful mappings for managing tabs
"map <leader>tn :tabnew<cr>
"map <leader>to :tabonly<cr>
"map <leader>tcc :tabclose<cr>
"map <leader>tm :tabmoveo


" Quote current selection
" TODO: This only works for selections that are created "forwardly"
vnoremap <leader>" <esc>a"<esc>gvo<esc>i"<esc>gvo<esc>ll
vnoremap <leader>' <esc>a'<esc>gvo<esc>i'<esc>gvo<esc>ll

" Quote words under cursor
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel

"comments plugin
" key-mappings for comment line in normal mode
noremap <leader>yy  :call CommentLine()<CR>
" key-mappings for range comment lines in visual <Shift-V> mode
vnoremap <leader>yy :call RangeCommentLine()<CR>

" key-mappings for un-comment line in normal mode
noremap  <leader>x  :call UnCommentLine()<CR>
" key-mappings for range un-comment lines in visual <Shift-V> mode
vnoremap <leader>x  :call RangeUnCommentLine()<CR>



" Yank/paste to the OS clipboard with ,y and ,p
nnoremap <leader>y "+y
nnoremap <leader>Y "+yy
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>y "+y
vnoremap <leader>Y "+yy
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" Copy to 'clipboard registry'
"

" toggle paste mode (to paste properly indented text)
"nnoremap <F2> :set invpaste paste?<CR>
"set pastetoggle=<F2>
set clipboard+=unnamed  " use the clipboards of vim and win
"set paste               " Paste from a windows or from vim
set go+=a               " Visual selection automatically copied to the clipboard

"vmap <C-c> "*y
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" Select all text
"nmap <C-a> ggVG

"inoremap <C-P> <ESC>:call PhpDocSingle()<CR>i 
"nnoremap <C-P> :call PhpDocSingle()<CR> 
"vnoremap <C-P> :call PhpDocRange()<CR>

" Fast saving
nmap <leader>w :w<cr>
map! ,w <ESC>:w<cr>l

map <Leader>j <ESC>:w\|:!/home/pavel/vagrant/tools/external_use/eslint-file.sh %:p<cr>
map <Leader>i <ESC>:w\|:!/home/pavel/vagrant/composer/vendor/bin/phpcs --standard=Intraworlds %:p<cr>
map <Leader>h <ESC>:w\|:!/home/pavel/vagrant/composer/vendor/bin/phpmd %:p text build/phpmd-errors.xml,build/phpmd-warnings.xml

map <Leader>sd <ESC>:w\|:!svn diff % \| colordiff<cr>
map <Leader>sdi <ESC>:w\|:!svn diff % \| kompare -<cr>  
map <Leader>su <ESC>:w\|:!svn update %<cr>
map <Leader>gf <ESC>:Filter function <cr>
"map <Leader>gf <ESC>:!grep "function" % \| sort \| grep --color "function"<cr>
"map <Leader>gf <ESC>:RV grep "function" expand("%:p") \| sort \| grep --color "function"<cr>
"
"1.)obarvovani, 2.)zarovnani prvniho cisla,
"grep -n " function " Service.php | grep -v "*" | sort | awk -F'(' '{ printf "%-68s %s\n", $1, $2}' | awk -F' function ' '{printf "%-20s %s\n", $1, $2}'
"
" Edit the vimrc file
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" Pull word under cursor into LHS of a substitute (for quick search search and replace)
nnoremap <leader>s :%s#\<<C-r>=expand("<cword>")<CR>\>#

" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" Keep search matches in the middle of the window and pulse the line when moving
" to them.
"nnoremap n n:call PulseCursorLine()<cr>
"nnoremap N N:call PulseCursorLine()<cr>

" Source a project file
"if filereadable("./kody/vimrc-prj")
"    source ./kody/vimrc-prj
"elseif filereadable("./vimrc-prj")
"    source ./vimrc-prj
"else
"    set tags=~/tr/trunk/kody/php.tags
"    "set tags+=~/tr/trunk/application/php.tags
"endif
"
if filereadable("php.tags")
    set tags=php.tags
else
    if filereadable("./application/index.php")
        cd application
        !ctags-exuberant -f ../php.tags --tag-relative=yes  --PHP-kinds=+cf --languages=+PHP,+JavaScript -R
        cd ../portal
        !ctags-exuberant --append=yes -f ../php.tags --tag-relative=yes  --PHP-kinds=+cf --languages=+PHP,+JavaScript -R
        cd ..

        set tags=php.tags
    endif
endif

"manipulovani s oknami, zavre buffer, ale zachova split windows
"map <c-w> :bw %<cr>  "pouziva se na split window
nmap <leader>f <ESC>:call CleanClose(1)<cr>
nmap <leader> q <ESC> :q<cr>

nmap <F6> o iwlot ; <ESC>
nmap <F7> o mtimestop ; <ESC>

map <F8> <ESC>yiw<ESC>OIW_Core_Log::getLogger(__CLASS__)->error(sprintf("\033[41m.....\033[0m%s: ", "<ESC>pa").var_export($<ESC>pa, 1));<ESC>
map <leader><F8> <ESC>yiw<ESC>Ovar_dump(sprintf("\033[41m.....\033[0m%s: ", "<ESC>pa").var_export($<ESC>pa, 1));<ESC>

"run unit test, if you are in method in test class - since vagrant not working - but is possible to run command to vagrant
"map <F12> <ESC>j[[2W :Shell cd ~/tr/trunk/;phpunit --filter=<C-R>=expand("<cword>")<CR> % <CR>
"
map <F11> <ESC>:call IwMoveFclientFile('<C-R>=expand("<cword>")<CR>')<CR>
map <F11>a <ESC>:call IwMoveToRestAdapterFile('<C-R>=expand("<cword>")<CR>')<CR>

map <F12> <ESC>:call IwGetClassFile('<C-R>=expand("<cword>")<CR>', line('.'))<CR>
map <leader><F12> <ESC>:so /home/pavel/.vim/vimrc-pavel<CR><ESC>:so /home/pavel/.vim/plugin/iw_utils.vim<CR>

"vyhleda bean instanci promeny, na ktery je prave ukazatel, a zaroven ji
"pripravy pro vyhledani v ctags
map <leader><F9> <ESC>"9yiwmz?<C-r><C-w>.*=.*IW_Core_BeanFactory::singleton(.*\_s*.*'IW_.*'\_s*.*)<CR>2/IW_<CR>"8yiw'zO<ESC>I$<ESC>"9pA = new <ESC>"8pA; <ESC>jo$<ESC>"9pA-><C-x><C-o>
map <leader><F10> <ESC>"9yiwmz?<C-r><C-w>.*=.*IW_Core_BeanFactory::singleton(.*\_s*.*'IW_.*'\_s*.*)<CR>2/IW_<CR><F6>

map <F9> <ESC>:!svn cat %:p > /tmp/vimdiff_bla8979865aadaj1.php <CR>:!gvimdiff /tmp/vimdiff_bla8979865aadaj1.php %:p <CR>

" Buffer navigation
map <PageUp> <ESC>:bp<CR>
map <PageDown> <ESC>:bn<CR>


nnoremap <Leader>b :Pbuf<CR>

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction


" nebo vert new
:command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>
:command! -nargs=* -complete=shellcmd RV vert new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>



function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

"aUsage: :Shell ls -al

function! CleanClose(tosave)
    "if (a:tosave == 1)
        "w!
    "endif
    let todelbufNr = bufnr("%")
    let newbufNr = bufnr("#")
    if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
        exe "b".newbufNr
    else
        bnext
    endif

    if (bufnr("%") == todelbufNr)
        new
    endif
    exe "bd".todelbufNr
endfunction

"vyhledavani v bufferech
function! BufSel(pattern)
  let bufcount = bufnr("$")
  let currbufnr = 1
  let nummatches = 0
  let firstmatchingbufnr = 0
  while currbufnr <= bufcount
    if(bufexists(currbufnr))
      let currbufname = bufname(currbufnr)
      if(match(currbufname, a:pattern) > -1)
        echo currbufnr . ": ". bufname(currbufnr)
        let nummatches += 1
        let firstmatchingbufnr = currbufnr
      endif
    endif
    let currbufnr = currbufnr + 1
  endwhile
  if(nummatches == 1)
    execute ":buffer ". firstmatchingbufnr
  elseif(nummatches > 1)
    let desiredbufnr = input("Enter buffer number: ")
    if(strlen(desiredbufnr) != 0)
      execute ":buffer ". desiredbufnr
    endif
  else
    echo "No matching buffers"
  endif
endfunction

"Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")



""""""""""""""""""""""""""""""
" => Visual mode related
" """"""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
 vnoremap <silent> * :call VisualSelection('f')<CR>
 vnoremap <silent> # :call VisualSelection('b')<CR>

" When you press <leader>r you can search and replace the selected text
"vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>
 
function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Pulse ------------------------------------------------------------------- {{{

function! PulseCursorLine()
    let current_window = winnr()

    windo set nocursorline
    execute current_window . 'wincmd w'

    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    hi CursorLine guibg=#3a3a3a
    redraw
    sleep 20m

    hi CursorLine guibg=#4a4a4a
    redraw
    sleep 30m

    hi CursorLine guibg=#3a3a3a
    redraw
    sleep 30m

    hi CursorLine guibg=#2a2a2a
    redraw
    sleep 20m

    execute 'hi ' . old_hi

    windo set cursorline
    execute current_window . 'wincmd w'
endfunction

" }}}

iabbr v@@ //[TODO, pavel.filipcik@intraworlds.com, C]

abbrev iwmail pavel.filipcik@intraworlds.com
abbrev iwtodo //[TODO, pavel.filipcik@intraworlds.com, B] do this
abbrev iwbean IW_Core_BeanFactory::singleton('');<esc>2hi
abbrev iwlog IW_Core_Log::getLogger($this)->error(var_export($, 1));<esc>5hi
abbrev iwabslog \IW_Core_Log::getLogger($this)->error(var_export($, 1));<esc>5hi
abbrev iwlot IW_Core_Log::getLogger(__CLASS__." ".__LINE__)->error(sprintf("\033[41m.....\033[0m%s: ", "<ESC>aradek a time:").var_export('<C-R>=strftime("%H%M%S")<CR>', 1));


abbrev iwlotv echo('<C-R>=strftime("%H%M%S")<CR>'."\n");
abbrev starttime $startWET = microtime(true);<esc>
abbrev stoptimee echo ('<C-R>=line(".")<CR>' . ": ". (microtime(true) - $startWET) . "\n");  #*1000 = ms <esc>
abbrev stoptime IW_Core_Log::getLogger($this)->error(var_export('<C-R>=line(".")<CR>' . ": ". (microtime(true) - $startWET), 1)); #*1000 = ms<esc>

map<leader>t <ESC>o<ESC>oiwlot<ESC>


" oznaceni radku  - zrusit s   :call clearmatches()
nnoremap <silent> <Leader>l :exe "let m = matchadd('WildMenu','\\%" . line('.') . "l')"<CR>
"nnoremap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>  
set cursorline

"
"zbytky:
"autocmd FileType c,cpp,java,php autocmd BufWritePre <buffer> :%s/\s\+$//e
"":5,10norm! @a
" :autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
"
":highlight Pmenu ctermbg=238 gui=bold
":runtime syntax/colortest.vim
":help supertab
":help cmdline
":help pattern
"set tags=~/tr/trunk/portal/php.tags
"set tags+=~/tr/trunk/application/php.tags
":UndotreeToggle
":call PhpDocRange()<CR>
"cnoremap w!! w !sudo tee % >/dev/null
"
"
"" Source a global configuration file if available
"if filereadable("/home/pavel/.vim/vimrc.local")
"  source /home/pavel/.vim/vimrc-pavel
"endif
"
":set updatecount=50 to wirte swap file to disk after 50 keystrokes
"
"
"TODO aut ulozeni session pro project???
":mksession <file>  to write out session to a file
":source <file> to load session from a file
"vim -S <file> to start editing a session 
"
"
"abbr psvm public static void main(String[] args){<CR>}<esc>O
"abbr sysout System.out.println("");<esc>2hi
"abbr sop System.out.println("");<esc>2hi
"abbr syserr System.err.println("");<esc>2hi
"abbr sep System.err.println("");<esc>2hi
"
"let &backupdir=s:vimetc.'backups/'
"
"abbr forl for (int i = 0; i < ; i++) {<esc>7hi
"
"" phpmd include/newmenubuilder.php xml codesize,unusedcode,naming


"div.content>h1.post-title+p{Sample Content}
"Press Cmd+E and it will expand to this:
"%s///g  ->vymazani  mka na konci radku
"
"vim -V12log
"
"
"ColorHighlight - start/update highlighting 
" ColorClear      - clear all highlights 
" ColorToggle     - toggle highlights
" 
"
"
"
" :bufdo tab split
""
":tab sball - this opens a new tab for each open buffer 
":he switchbuf - this controls buffer switching behaviour, try :se switchbuf=usetab,newtab. This should mean switching to the existing tab if the buffer is open, or creating a new one if not.
" :Wipeout
"
"
"
"nnoremap <A-j> :m .+1<CR>==
"nnoremap <A-k> :m .-2<CR>==
"inoremap <A-j> <Esc>:m .+1<CR>==gi
"inoremap <A-k> <Esc>:m .-2<CR>==gi
"vnoremap <A-j> :m '>+1<CR>gv=gv
"vnoremap <A-k> :m '<-2<CR>gv=gv
"http://vim.wikia.com/wiki/Moving_lines_up_or_down#Mappings_to_move_lines
"
"
"
"To begin diffing on all visible windows:
":windo diffthis
"To end diff mode:
":diffoff!
"
" reset barev/color
" :syntax sync fromstart
"
command! -nargs=? Filter let @a='' | execute 'g/<args>/y A' | new | setlocal bt=nofile | put! a
"After searching for some text, enter :Filter (or just type :F then press Tab for command completion). Entering this command will open a new scratch window listing all lines that contain the text that was last searched for.
"
":ConqueTerm bash
